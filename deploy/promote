#!/usr/bin/env bash

set -eo pipefail

################################################################################
# Validate Inputs
################################################################################

function usage {
    echo "usage: $0 [namespace] [overlay] [tag] [app]"
    echo "  namespace    namespace to promote the image (eg. production)"
    echo "  overlay      kustomize overlay to apply (eg. indigo)"
    echo "  tag          tag of the image version (eg. latest)"
    echo "  app          slug of the app (eg. broadband-plans)"
    exit 1
}

[ -z "$4" ] && { usage; }

################################################################################
# Set Inputs
################################################################################

NAMESPACE=$1
OVERLAY=$2
TAG=$3
APP=$4

################################################################################
# Constants
################################################################################

DIR="$(dirname "${BASH_SOURCE[0]}")"

################################################################################
# Setup Environment
################################################################################

source ${DIR}/env

################################################################################
# Set Variables
################################################################################

REPOSITORY="$ENDPOINT/$APP"
IMAGE="$REPOSITORY:$TAG"

echo "hello world"
echo $REPOSITORY
echo $IMAGE
echo "hello world"

################################################################################
# Login to AWS
################################################################################

$(aws ecr get-login --no-include-email)

################################################################################
# Pull Build Image
################################################################################

$debug docker pull "$IMAGE.build"

################################################################################
# Tag Release Image
################################################################################

$debug docker tag "$IMAGE.build" "$IMAGE"

################################################################################
# Push Release Image
################################################################################

$debug docker push "$IMAGE"

################################################################################
# Switch Context
################################################################################

$debug aws eks update-kubeconfig --name $CLUSTER

################################################################################
# Run PreRelease
################################################################################

${DIR}/pre-release "${NAMESPACE}" "${TAG}" "${APP}"

################################################################################
# Set properties
################################################################################

pushd k8s/overlays/$OVERLAY
$debug kustomize edit set image unset=$REPOSITORY:$TAG
popd

################################################################################
# Generate Schema
################################################################################

$debug kustomize build k8s/overlays/$OVERLAY -o k8s/patch.yaml

################################################################################
# Update Cluster
################################################################################

$debug kubectl apply -f k8s/patch.yaml -n $NAMESPACE --wait

################################################################################
# Wait for Deployments
################################################################################

${DIR}/wait $NAMESPACE
